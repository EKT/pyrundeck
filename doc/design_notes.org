#+TITLE: System for automated DSpace installation
#+LATEX_HEADER: \DeclareGraphicsRule{*}{mps}{*}{}

* Introduction
  After the filling in the wizard the user should be able to (semi)
  automatically deploy a repository. This document describes in some
  detail parts of the procedure that can be completely automated.

* High level description
** Initial beta deployment workflow

   A high level depiction of the workflow for the initial beta
   deployment of a repository is shown in figure
   \ref{fig:beta-deployment}.


\begin{figure}
\centering
\includegraphics[width=15cm]{images/beta_deployement.png}
\caption{Initial beta repository deployment workflow}
\label{fig:beta-deployment}
\end{figure}

   Each step is described briefly bellow:

   - db creation :: Request credentials for two databases, one for
                    production one for beta and some other details
                    about the installations (server names, install
                    directories, etc). The credentials and any other
                    information about the repository should be
                    recorded locally in a database for future
                    reference (could we use an existing system?)

   - git branch :: Create two new branches on the git repository for
                   the new DSpace installation: ~<name>-dev~ and
                   ~<name>-master~ where ~<name>~ is the short name
                   for the new installation. This should be given by
                   the user.

   - create confs :: Using data from the repository wizard, and the db
                     creation step create the necessary configuration
                     files for DSpace:

     + ~<name>-beta.properties~ & ~<name>-production.properties~
     + ~dspace/config/dspace.cfg~
     + ~dspace/config/input-forms.xml & dspace/config/input-forms_el.xml~
     + ~dspace/config/registries/ekt_schema.xml~ (?)
     + ~dspace/config/spring/api/discovery.xml~
     + ~dspace/config/spring/api/itemsigning.xml~
     + ~dspace/config/spring/api/requestitem.xml~ (?)
     + ~dspace/config/workflow.xml~ (?)
     + ~dspace/config/registration-form.xml~
     + ~dspace/config/ekt2csl-metadata.cfg~ &
       ~dspace/config/ekt2csl-types.cfg~ (?)

   - git commit :: Make a commit in the appropriate directory of the
                   git repository ~dspace-compilation-properties~ for
                   the ~*.properties~ files and one in newly created
                   branch ~<name>-dev~ for the other configurations.

   - git tag compile :: Try to compile the code in the branch
        ~<name>-dev~. If successful merge (fast forward) ~<name>-dev~
        to ~<name>-master~ and tag the merge commit (tag name should
        probably be given as input, or computed using a simple
        versioning scheme). Commit the resulting compiled code to the
        appropriate rollout git repository, creating it if it does not
        yet exist.

   - deploy :: Make a request for deployment from the rollout git
               repository.

** Beta update workflow

   The update procedure, which is a bit simpler is shown in figure
   \ref{fig:beta-update}.

\begin{figure}
\centering
\includegraphics[width=15cm]{images/beta_update.png}
\caption{Beta repository update workflow}
\label{fig:beta-update}
\end{figure}

   - update confs :: Using data from the repository wizard, and the db
                     creation step update the necessary configuration
                     files for DSpace:

   - git commit :: Make a commit in the appropriate directory of the
                   git repository ~dspace-compilation-properties~ for
                   the ~*.properties~ files and one in newly created
                   branch ~<name>-dev~ for the other configurations.

   - git tag compile :: Try to compile the code in the branch
        ~<name>-dev~. If successful merge (fast forward) ~<name>-dev~
        to ~<name>-master~ and tag the merge commit (tag name should
        probably be given as input, or computed using a simple
        versioning scheme). Commit the resulting compiled code to the
        appropriate rollout git repository, creating it if it does not
        yet exist.

   - update beta :: Make a request for an update from the rollout git
                    repository.


** Initial production deployment and update workflows

   Since some information about the repository is already available
   from the first step of the beta deployment workflow, the production
   repository deployment and the production update workflows, are very
   similar to the beta update. They are shown in images
   \ref{fig:production-deployment} and \ref{fig:production-update}
   respectively.

\begin{figure}
\centering
\includegraphics[width=15cm]{images/production_deployment.png}
\caption{Production repository deployment workflow}
\label{fig:production-deployment}
\end{figure}

\begin{figure}
\centering
\includegraphics[width=15cm]{images/production_update.png}
\caption{Production repository update workflow}
\label{fig:production-update}
\end{figure}
